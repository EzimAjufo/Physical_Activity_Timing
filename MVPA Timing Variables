<<<<<<< HEAD
### Assumes availability of certain data as flat files (please see README)

=======
### Assumes availability of specified fields as flat files (please see README) and the dat_AT dataframe  (see seed.R)

# Depends
library(data.table)
library(survival)
library('tidyverse')
library('ggsurvfit')

# Step 1: Create time of day variables
# Calculate row-wise totals for morning MVPA
dat_AT$mvpa_daily_total_AM <- rowSums(dat_AT[, c("mvpa_hour7", "mvpa_hour8", "mvpa_hour9", "mvpa_hour10", "mvpa_hour11", "mvpa_hour12")], na.rm = TRUE)
dat_AT$mvpa_daily_total_AM = as.numeric(dat_AT$mvpa_daily_total_AM)
summary(dat_AT$mvpa_daily_total_AM)

# Calculate row-wise totals for afternoon MVPA
dat_AT$mvpa_daily_total_afternoon <- rowSums(dat_AT[, c("mvpa_hour13", "mvpa_hour14", "mvpa_hour15", "mvpa_hour16", "mvpa_hour17", "mvpa_hour18")], na.rm = TRUE)
dat_AT$mvpa_daily_total_afternoon = as.numeric(dat_AT$mvpa_daily_total_afternoon)
summary(dat_AT$mvpa_daily_total_afternoon)

# Calculate row-wise totals for evening MVPA
dat_AT$mvpa_daily_total_PM <- rowSums(dat_AT[, c("mvpa_hour19", "mvpa_hour20", "mvpa_hour21", "mvpa_hour22", "mvpa_hour23", "mvpa_hour24")], na.rm = TRUE)
dat_AT$mvpa_daily_total_PM = as.numeric(dat_AT$mvpa_daily_total_PM)
summary(dat_AT$mvpa_daily_total_PM)

# Calculate row-wise totals for evening MVPA
dat_AT$mvpa_daily_total_overnight <- rowSums(dat_AT[, c("mvpa_hour1", "mvpa_hour2", "mvpa_hour3", "mvpa_hour4", "mvpa_hour5", "mvpa_hour6")], na.rm = TRUE)
dat_AT$mvpa_daily_total_overnight = as.numeric(dat_AT$mvpa_daily_total_overnight)
summary(dat_AT$mvpa_daily_total_overnight)

# Step 2: Assign time groups using simple majority approach

# Assign group 1: Morning 
dat_AT$active_AM = ifelse(dat_AT$mvpa_daily_total_AM > dat_AT$mvpa_daily_total_afternoon &  
                         dat_AT$mvpa_daily_total_AM > dat_AT$mvpa_daily_total_PM,
                           1, 0)

table(dat_AT$active_AM)

# Assign group 2: Afternoon 
dat_AT$active_afternoon = ifelse(dat_AT$mvpa_daily_total_afternoon > dat_AT$mvpa_daily_total_AM &  
                         dat_AT$mvpa_daily_total_afternoon > dat_AT$mvpa_daily_total_PM,
                           1, 0)

table(dat_AT$active_afternoon)

# Assign group 3: Evening 
dat_AT$active_PM = ifelse(dat_AT$mvpa_daily_total_PM > dat_AT$mvpa_daily_total_AM &  
                         dat_AT$mvpa_daily_total_PM > dat_AT$mvpa_daily_total_afternoon,
                           1, 0)

table(dat_AT$active_PM)


# Assign group 4: Mixed 
dat_AT$active_Mixed <- ifelse(
    dat_AT$active_afternoon == 0 & 
    dat_AT$active_AM == 0 & 
    dat_AT$active_PM == 0 & 
    (
      dat_AT$mvpa_daily_total_AM == dat_AT$mvpa_daily_total_PM | 
      dat_AT$mvpa_daily_total_AM == dat_AT$mvpa_daily_total_afternoon | 
      dat_AT$mvpa_daily_total_PM == dat_AT$mvpa_daily_total_afternoon
    ),
  1,
  0
)


# Step 3: Create simple majority timing variable (single variable)
# Correct classification for active_TOD
dat_AT$active_TOD <- ifelse(dat_AT$who_acc ==1 &
  dat_AT$active_AM == 1, "active_AM",
  ifelse(dat_AT$who_acc ==1 &
    dat_AT$active_afternoon == 1, "active_afternoon",
    ifelse(dat_AT$who_acc ==1 &
      dat_AT$active_PM == 1, "active_PM",
        ifelse(
          dat_AT$who_acc == 0, "Inactive",
          "Unclassified" # Default case for unclassified rows
        )
      )
    )
  )


# Check the frequency table of active_TOD
dat_AT$active_TOD = as.factor(dat_AT$active_TOD)
table(dat_AT$active_TOD)
