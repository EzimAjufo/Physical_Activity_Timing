# Depends
library(magrittr)
library('tidyverse')
library('cmprsk')
library('ggsurvfit')
library("patchwork")
library ("scales")
library("colorspace")

# Load data
dat_AT = fread('complete_time_with_hours_121224.csv', stringsAsFactors = F, data.table = F)
dat_revokedconsent = fread('w7089_20241216.csv', stringsAsFactors = F, data.table = F)
dat_CVmortality = fread('cv_death_restricted_v3_202307.tsv', stringsAsFactors = FALSE, data.table = FALSE)
dat_CADhard= fread('cad_hard_202401.csv', stringsAsFactors = F, data.table = F)
dat_CADsoft = fread('cad_202401.csv', stringsAsFactors = F, data.table = F)

dat_CAD = merge(dat_CADhard, dat_CADsoft, by = "sample_id",
                    suffix = c("_CADhard", "_CADsoft"))

dat_AT = merge(dat_AT, dat_CAD, by = "sample_id", 
              all.x = T, all.y = F)

# Exclusions - revoked consent

sum(dat_revokedconsent$V1 %in% dat_AT$sample_id)
dat_AT <- dat_AT[!dat_AT$sample_id %in% dat_revokedconsent$V1, ]

# Merging phenotype files

dat_AT = merge(dat_AT, dat_CVmortality, by = "sample_id", all.x = TRUE, all.y = FALSE) 
dim(dat_AT)

# Create CV mortality variable
dat_AT$time_to_CVdeathdays = as.numeric(difftime(dat_AT$censor_date, dat_AT$end_date, unit = "days"))
dat_AT$time_to_CVdeath = dat_AT$time_to_CVdeathdays / 365

# Create CAD-related variables 
# Seedfile
system(paste0('dx download exome-seq:ea/Projects/SedentaryTime/SedTime_Phewas/Phecode_Files/projects_skhurshid_sed_phewas_v1_cox_data_sed_110524.csv'))
phecode_seed = fread('projects_skhurshid_sed_phewas_v1_cox_data_sed_110524.csv', stringsAsFactors = FALSE, data.table = FALSE, fill = TRUE, quote = "",check.names = FALSE)

# Remove triple quotes from column names
names(phecode_seed) <- gsub("\"", "", names(phecode_seed))
names(phecode_seed)

dat_AT <- merge(
  dat_AT,
  phecode_seed[, c("sample_id", "phenotype_censor_date")],
  by = "sample_id",
  all.x = TRUE
)

dat_AT$incident_disease_CADsoft = as.numeric(dat_AT$incident_disease_CADsoft)
dat_AT$prevalent_disease_CADsoft = as.numeric(dat_AT$prevalent_disease_CADsoft)

dat_AT$prev_cadsoft_accel = ifelse(dat_AT$prevalent_disease_CADsoft ==1 | 
                                                  (dat_AT$incident_disease_CADsoft  ==1 & 
                                                   dat_AT$censor_date_CADsoft <= dat_AT$end_date),
                                                    1, 0)

dat_AT$incd_cadsoft_accel= ifelse(dat_AT$incident_disease_CADsoft ==1 &
                                                 dat_AT$censor_date_CADsoft > dat_AT$end_date, 1, 0)

dat_AT$time_accel_to_cadsoft <- ifelse(
  dat_AT$has_disease_CADsoft == 0 | is.na(dat_AT$has_disease_CADsoft),
  pmin(
    as.numeric(difftime(dat_AT$censor_date_CADsoft, dat_AT$end_date, units = "days")) / 365.25,
    as.numeric(difftime(dat_AT$phenotype_censor_date, dat_AT$end_date, units = "days")) / 365.25
  ),
  as.numeric(difftime(dat_AT$censor_date_CADsoft, dat_AT$end_date, units = "days")) / 365.25
)


# Step 1: Create time of day variables
# Calculate row-wise totals for morning MVPA
dat_AT$mvpa_daily_total_AM <- rowSums(dat_AT[, c("mvpa_hour7", "mvpa_hour8", "mvpa_hour9", "mvpa_hour10", "mvpa_hour11", "mvpa_hour12")], na.rm = TRUE)
dat_AT$mvpa_daily_total_AM = as.numeric(dat_AT$mvpa_daily_total_AM)
summary(dat_AT$mvpa_daily_total_AM)

# Calculate row-wise totals for afternoon MVPA
dat_AT$mvpa_daily_total_afternoon <- rowSums(dat_AT[, c("mvpa_hour13", "mvpa_hour14", "mvpa_hour15", "mvpa_hour16", "mvpa_hour17", "mvpa_hour18")], na.rm = TRUE)
dat_AT$mvpa_daily_total_afternoon = as.numeric(dat_AT$mvpa_daily_total_afternoon)
summary(dat_AT$mvpa_daily_total_afternoon)

# Calculate row-wise totals for evening MVPA
dat_AT$mvpa_daily_total_PM <- rowSums(dat_AT[, c("mvpa_hour19", "mvpa_hour20", "mvpa_hour21", "mvpa_hour22", "mvpa_hour23", "mvpa_hour24")], na.rm = TRUE)
dat_AT$mvpa_daily_total_PM = as.numeric(dat_AT$mvpa_daily_total_PM)
summary(dat_AT$mvpa_daily_total_PM)

# Calculate row-wise totals for evening MVPA
dat_AT$mvpa_daily_total_overnight <- rowSums(dat_AT[, c("mvpa_hour1", "mvpa_hour2", "mvpa_hour3", "mvpa_hour4", "mvpa_hour5", "mvpa_hour6")], na.rm = TRUE)
dat_AT$mvpa_daily_total_overnight = as.numeric(dat_AT$mvpa_daily_total_overnight)
summary(dat_AT$mvpa_daily_total_overnight)

# Step 2: Assign time groups using simple majority approach

# Assign group 1: Morning 
dat_AT$active_AM = ifelse(dat_AT$mvpa_daily_total_AM > dat_AT$mvpa_daily_total_afternoon &  
                         dat_AT$mvpa_daily_total_AM > dat_AT$mvpa_daily_total_PM,
                           1, 0)

table(dat_AT$active_AM)

# Assign group 2: Afternoon 
dat_AT$active_afternoon = ifelse(dat_AT$mvpa_daily_total_afternoon > dat_AT$mvpa_daily_total_AM &  
                         dat_AT$mvpa_daily_total_afternoon > dat_AT$mvpa_daily_total_PM,
                           1, 0)

table(dat_AT$active_afternoon)

# Assign group 3: Evening 
dat_AT$active_PM = ifelse(dat_AT$mvpa_daily_total_PM > dat_AT$mvpa_daily_total_AM &  
                         dat_AT$mvpa_daily_total_PM > dat_AT$mvpa_daily_total_afternoon,
                           1, 0)

table(dat_AT$active_PM)


# Assign group 4: Mixed 
dat_AT$active_Mixed <- ifelse(
    dat_AT$active_afternoon == 0 & 
    dat_AT$active_AM == 0 & 
    dat_AT$active_PM == 0 & 
    (
      dat_AT$mvpa_daily_total_AM == dat_AT$mvpa_daily_total_PM | 
      dat_AT$mvpa_daily_total_AM == dat_AT$mvpa_daily_total_afternoon | 
      dat_AT$mvpa_daily_total_PM == dat_AT$mvpa_daily_total_afternoon
    ),
  1,
  0
)


# Step 3: Create simple majority timing variable (single variable)
# Correct classification for active_TOD
dat_AT$active_TOD <- ifelse(dat_AT$who_acc ==1 &
  dat_AT$active_AM == 1, "active_AM",
  ifelse(dat_AT$who_acc ==1 &
    dat_AT$active_afternoon == 1, "active_afternoon",
    ifelse(dat_AT$who_acc ==1 &
      dat_AT$active_PM == 1, "active_PM",
        ifelse(
          dat_AT$who_acc == 0, "Inactive",
          "Unclassified" # Default case for unclassified rows
        )
      )
    )
  )


# Check the frequency table of active_TOD
dat_AT$active_TOD = as.factor(dat_AT$active_TOD)
table(dat_AT$active_TOD)
